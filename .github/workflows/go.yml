name: BuildAndTest

on:
  push:
    branches: [ "main" ]
  pull_request:


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Dependencies
      run: go mod tidy

    - name: Build
      run: go build -v ./...

    - name: Run Tests with Coverage
      run: |
        mkdir -p coverage
        go test -coverprofile=coverage/coverage.out ./...

    - name: Generate Coverage Summary
      run: |
        go tool cover -func=coverage/coverage.out > coverage/coverage-summary.txt

    - name: Generate Coverage Badge
      run: |
        coverage=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Coverage: $coverage%"
        
        color="red"
        echo "https://img.shields.io/badge/coverage-$coverage%25-$color"
        curl -o coverage/badge.svg "https://img.shields.io/badge/coverage-$coverage%25-$color"
        if  (( $(echo "$coverage < 80" | bc -l) )); then
          exit 1
        fi
        if (( $(echo "$coverage >= 80" | bc -l) )); then
          color="green"
        elif (( $(echo "$coverage >= 50" | bc -l) )); then
          color="yellow"
        fi
    - name: Coveralls
      uses: coverallsapp/github-action@v2.3.0
      if: always()
      with:
        github-token: ${{ secrets.github_token }}
        file: coverage/coverage.out
        format: golang
        outfile: coverage/coverage.lcov
    - name: TraceFile
      if: always()
      run: |
        sudo apt-get install -y lcov
        lcov --add-tracefile ./coverage/coverage.lcov -o ./coverage.info
    
    - name: Report Coverage
      if: always()
      uses: zgosalvez/github-actions-report-lcov@v1
      with:
        coverage-files: coverage/coverage.info
        minimun-coverage: 80
        artifact-name: code-coverage-report


    - name: Commit and Push Changes
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config pull.ff only 
        git pull origin main
        git add coverage/badge.svg README.md
        git commit -m "Update coverage badge [skip ci]" || echo "No changes to commit"
        git pull origin ${{ github.ref_name }}
        git push origin HEAD:${{ github.ref_name }}
